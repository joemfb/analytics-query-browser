(function() {
  'use strict';

  angular.module('group-by-browser', ['ngRoute', 'ui.bootstrap'])
    .config(GroupByConfig)
    .controller('GroupByQueryController', GroupByQueryController)
    .directive('referenceLabel', referenceLabelDirective)
    // generated by https://gist.github.com/joemfb/b682504c7c19cd6fae11
    .constant('aggregates', {"by-type":{"float":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"unsignedInt":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"int":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"dateTime":["max","min","count"],"gYear":["max","min","count"],"gMonth":["max","min","count"],"yearMonthDuration":["max","sum","min","count","avg"],"decimal":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"anyURI":["count"],"dayTimeDuration":["max","sum","min","count","avg"],"date":["max","min","count"],"double":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"string":["count"],"gYearMonth":["max","min","count"],"time":["max","min","count"],"point":["max","min","count"],"unsignedLong":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"long":["variance","max","covariance-population","stddev","covariance","stddev-population","median","sum","min","count","avg","correlation","variance-population"],"gDay":["max","min","count"]},"info":{"variance-population":{"reference-arity":1},"correlation":{"reference-arity":2},"avg":{"reference-arity":1},"count":{"reference-arity":1},"min":{"reference-arity":1},"sum":{"reference-arity":1},"median":{"reference-arity":1},"stddev-population":{"reference-arity":1},"covariance":{"reference-arity":2},"stddev":{"reference-arity":1},"covariance-population":{"reference-arity":2},"max":{"reference-arity":1},"variance":{"reference-arity":1}}});

  GroupByConfig.$inject = ['$routeProvider', '$locationProvider'];

  function GroupByConfig($routeProvider, $locationProvider) {
    $locationProvider.html5Mode(true);

    $routeProvider.
      when('/', {
        templateUrl: '/public/templates/query.html',
        controller: 'GroupByQueryController'
      }).
      otherwise({ redirectTo: '/' });
  }

  function referenceLabelDirective() {
    return {
      restrict: 'E',
      scope: { reference: '=' },
      templateUrl: '/public/templates/reference-label.html',
      link: function link($scope) {
        $scope.$watch('reference', function(newVal, oldVal) {
          if (newVal) {
            $scope.ref = !!newVal.ref && !newVal.alias ? newVal.ref : newVal;
          }
        });
      }
    };
  }

  GroupByQueryController.$inject = ['$scope', '$http', '$q', 'aggregates'];

  function GroupByQueryController($scope, $http, $q, aggregates) {
    var model = {
          queryConfig: null,
          queryError: null,
          config: null,
          configError: null,
          results: null,
          includeFrequency: false,
          loadingConfig: false,
          loadingResults: false
        },
        deferredAbort = null;

    function updateConfig(response) {
      model.config = response.data;
      model.configError = null;
      model.docsExist = !angular.equals(model.config.docs, {});
      model.loadingConfig = false;
    }

    function handleConfigError(response) {
      model.loadingConfig = false;

      if (response.status !== 0) {
        model.configError = {
          title: response.statusText,
          description: response.data
        };
      }
    }

    function getConfig() {
      var params = {};

      model.loadingConfig = true;

      if ( model.config ) {
        params['rs:database'] = model.config['current-database'];
      }

      clearResults();
      model.includeFrequency = false;
      // model.config = null;
      model.queryConfig = {
        'result-type': 'group-by',
        rows: [],
        columns: [],
        computes: [],
        options: ['headers=true']
      };

      $http.get('/v1/resources/index-discovery', {
        params: params
      }).then(updateConfig, handleConfigError);
    }

    function updateResults(response) {
      model.results = response.data;
      model.queryError = null;
      model.loadingResults = false;
    }

    function handleResultsError(response) {
      model.loadingResults = false;

      if (response.status !== 0) {
        model.queryError = {
          title: response.statusText,
          description: response.data
        };
      }
    }

    function clearResults() {
      model.results = null;
    }

    function getResults() {
      var params = {},
          queryConfig = angular.copy(model.queryConfig);

      if ( model.config ) {
        params['rs:database'] = model.config['current-database'];
      }

      queryConfig.computes.forEach(function(compute) {
        delete compute.availableFns;
      });

      if ( model.includeFrequency ) {
        queryConfig.computes.push({ fn: "frequency" });
      }

      //TODO: validate queryConfig

      model.loadingResults = true;
      clearResults();

      deferredAbort = $q.defer();
      $http({
        method: 'POST',
        url: '/v1/resources/group-by',
        params: params,
        data: queryConfig,
        timeout: deferredAbort.promise
      }).then(updateResults, handleResultsError);
    }

    // TODO: fix
    // if same member is a column/row AND a compute, and the column/row is nullable,
    // the aggregate is also nullable, which throws XDMP-BADNULLABLE
    function addMember(array, member) {
      if (array.indexOf(member) === -1) {
        array.push(member);
      }
    }

    function removeMember(array, member) {
      var index = array.indexOf(member);
      if (index > -1) {
        array.splice(index, 1);
      }
    }

    getConfig();

    angular.extend($scope, {
      model: model,
      getConfig: getConfig,
      getResults: getResults,
      clearResults: clearResults,
      cancelQuery: function() {
        deferredAbort.resolve();
      },
      addRow: function(member) {
        addMember(model.queryConfig.rows, member);
      },
      addColumn: function(member) {
        addMember(model.queryConfig.columns, member);
      },
      addCompute: function(member) {
        var compute = {
          ref: member,
          availableFns: aggregates['by-type'][ member['scalar-type'] ].filter(function(fn) {
            //TODO: support arity=2
            return aggregates.info[ fn ]['reference-arity'] === 1;
          })
        };

        if ( compute.availableFns.length === 1 ) {
          compute.fn = compute.availableFns[0];
        } else {
          compute.fn = '';
        }

        addMember(model.queryConfig.computes, compute);
      },
      removeRow: function(member) {
        removeMember(model.queryConfig.rows, member);
      },
      removeColumn: function(member) {
        removeMember(model.queryConfig.columns, member);
      },
      removeCompute: function(compute) {
        removeMember(model.queryConfig.computes, compute);
      }
    });
  }

})();